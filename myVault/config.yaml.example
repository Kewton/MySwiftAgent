# MyVault Configuration File Example
#
# Copy this file to config.yaml and customize for your environment.
# This file contains non-sensitive configuration and policies.
# Sensitive data (tokens, master key) should be in .env file.

# Application configuration
application:
  title: "myVault"
  version: "0.1.0"
  description: "Secure personal data vault and secret management service"
  host: "0.0.0.0"
  port: 8000

# Database configuration
database:
  # SQLite (default for development)
  url: "sqlite:///./myvault.db"

  # PostgreSQL (recommended for production)
  # url: "postgresql://user:password@localhost:5432/myvault"

  # Note: Can be overridden by DATABASE_URL environment variable

# Security configuration
security:
  # Master key MUST be set via MSA_MASTER_KEY environment variable
  # Token rotation policy (days)
  token_rotation_days: 90
  # Session timeout (minutes)
  session_timeout_minutes: 30

# RBAC Policies
# Define reusable access control policies with fine-grained permissions
# Format:
#   - name: Unique policy/role name
#     description: Human-readable description
#     permissions: List of permission rules
#       - effect: "allow" (or "deny" - not implemented yet)
#         actions: ["read", "write", "delete", "list"]
#         resources: ["secret:{project}:{path}" with wildcards]
policies:
  # Example: Full editor role
  - name: my-project-editor
    description: "Full read/write access to myproject production secrets"
    permissions:
      - effect: "allow"
        actions: ["read", "write", "list"]
        resources: ["secret:myproject*:prod/*"]

  # Example: Read-only worker role
  - name: my-project-worker-reader
    description: "Read-only access to worker and database secrets"
    permissions:
      - effect: "allow"
        actions: ["read"]
        resources: ["secret:myproject:prod/worker/*", "secret:myproject:prod/database/*"]

  # Example: Scheduler role
  - name: my-project-scheduler-reader
    description: "Read-only access to scheduler secrets"
    permissions:
      - effect: "allow"
        actions: ["read"]
        resources: ["secret:myproject:prod/scheduler/*"]

  # Example: Common secrets - read-only
  - name: common-reader
    description: "Read-only access to common secrets"
    permissions:
      - effect: "allow"
        actions: ["read", "list"]
        resources: ["secret:common:*"]

  # Example: Common secrets - full access
  - name: common-editor
    description: "Full read/write/delete access to common secrets"
    permissions:
      - effect: "allow"
        actions: ["read", "write", "delete", "list"]
        resources: ["secret:common:*"]

# Service definitions
# Each service needs a corresponding TOKEN_<service-name> in .env
# Services are assigned roles (policies) which grant specific permissions
services:
  - name: my-api-service
    description: "API service with full access to production and common secrets"
    enabled: true
    roles:
      - my-project-editor
      - common-editor

  - name: my-worker-service
    description: "Worker service with read-only access to data processing secrets"
    enabled: true
    roles:
      - my-project-worker-reader

  - name: my-scheduler-service
    description: "Scheduler service with read-only access to scheduling secrets"
    enabled: true
    roles:
      - my-project-scheduler-reader
      - common-reader

# Example: Disable a service
#  - name: deprecated-service
#    description: "Old service - disabled"
#    enabled: false
#    roles: []

# Audit configuration
audit:
  enabled: true
  log_access: true
  log_modifications: true
  retention_days: 90

# CORS configuration
cors:
  allow_origins:
    - "*"  # ⚠️  Configure appropriately for production
    # - "https://yourdomain.com"
    # - "https://app.yourdomain.com"
  allow_credentials: true
  allow_methods:
    - "*"
  allow_headers:
    - "*"
