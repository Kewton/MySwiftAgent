# Docker Compose configuration for MySwiftAgent services
# Docker Compose uses .env.docker for environment variables
# See docs/design/environment-variables.md for details

services:
  # JobQueue Service - Job queue management API
  jobqueue:
    env_file:
      - .env.docker
    image: myswiftagent-jobqueue:${JOBQUEUE_VERSION:-0.1.0}
    build:
      context: ./jobqueue
      dockerfile: Dockerfile
      tags:
        - "myswiftagent-jobqueue:${JOBQUEUE_VERSION:-0.1.0}"
    container_name: myswiftagent-jobqueue
    ports:
      - "8001:8000"
    environment:
      - PYTHONPATH=/app
      - JOBQUEUE_DB_URL=sqlite+aiosqlite:///./data/jobqueue.db
      - TZ=Asia/Tokyo
      - LOG_DIR=/app/logs
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ./docker-compose-data/jobqueue:/app/data
      - ./docker-compose-data/jobqueue/logs:/app/logs
    networks:
      - myswiftagent
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    restart: unless-stopped

  # MyScheduler Service - Job scheduling service
  myscheduler:
    env_file:
      - .env.docker
    image: myswiftagent-myscheduler:${MYSCHEDULER_VERSION:-0.2.0}
    build:
      context: ./myscheduler
      dockerfile: Dockerfile
      tags:
        - "myswiftagent-myscheduler:${MYSCHEDULER_VERSION:-0.2.0}"
    container_name: myswiftagent-myscheduler
    ports:
      - "8002:8000"
    environment:
      - PYTHONPATH=/app
      - TZ=Asia/Tokyo
      - JOBQUEUE_API_URL=http://jobqueue:8000
      - DATABASE_URL=sqlite:///./data/jobs.db
      - LOG_DIR=/app/logs
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ./docker-compose-data/myscheduler:/app/data
      - ./docker-compose-data/myscheduler/logs:/app/logs
    depends_on:
      jobqueue:
        condition: service_healthy
    networks:
      - myswiftagent
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  # MyVault Service - Secrets management service
  myvault:
    env_file:
      - .env.docker
    image: myswiftagent-myvault:${MYVAULT_VERSION:-0.1.0}
    build:
      context: ./myVault
      dockerfile: Dockerfile
      tags:
        - "myswiftagent-myvault:${MYVAULT_VERSION:-0.1.0}"
    container_name: myswiftagent-myvault
    ports:
      - "8003:8000"
    environment:
      - PYTHONPATH=/app
      - TZ=Asia/Tokyo
      # Database configuration
      - DATABASE_URL=sqlite:///./data/myvault.db
      # Master encryption key (REQUIRED - set in .env)
      - MSA_MASTER_KEY=${MSA_MASTER_KEY}
      # Service authentication tokens
      - TOKEN_expertagent=${MYVAULT_TOKEN_EXPERTAGENT}
      - TOKEN_myscheduler=${MYVAULT_TOKEN_MYSCHEDULER}
      - TOKEN_jobqueue=${MYVAULT_TOKEN_JOBQUEUE}
      - TOKEN_commonui=${MYVAULT_TOKEN_COMMONUI}
      # Logging
      - LOG_DIR=/app/logs
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ./docker-compose-data/myvault:/app/data
      - ./docker-compose-data/myvault/logs:/app/logs
      - ./myVault/config.yaml:/app/config.yaml:ro
    networks:
      - myswiftagent
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    restart: unless-stopped

  # ExpertAgent Service - AI agent service
  expertagent:
    env_file:
      - .env.docker
    image: myswiftagent-expertagent:${EXPERTAGENT_VERSION:-0.1.2}
    build:
      context: ./expertAgent
      dockerfile: Dockerfile
      tags:
        - "myswiftagent-expertagent:${EXPERTAGENT_VERSION:-0.1.2}"
    container_name: myswiftagent-expertagent
    ports:
      - "8004:8000"
    environment:
      - PYTHONPATH=/app
      - TZ=Asia/Tokyo
      # Admin authentication
      - ADMIN_TOKEN=${EXPERTAGENT_ADMIN_TOKEN}
      # MyVault Configuration (Priority for secrets management)
      - MYVAULT_ENABLED=${MYVAULT_ENABLED:-true}
      - MYVAULT_BASE_URL=http://myvault:8000
      - MYVAULT_SERVICE_NAME=expertagent
      - MYVAULT_SERVICE_TOKEN=${MYVAULT_TOKEN_EXPERTAGENT}
      - MYVAULT_DEFAULT_PROJECT=${MYVAULT_DEFAULT_PROJECT:-expertagent}
      - GOOGLE_APIS_DEFAULT_PROJECT=${GOOGLE_APIS_DEFAULT_PROJECT:-default_project}
      # API Keys are managed in MyVault (not passed as env vars)
      # Google APIs
      - GOOGLE_APIS_TOKEN_PATH=/app/token/token.json
      - GOOGLE_APIS_CREDENTIALS_PATH=/app/token/credentials.json
      # Mail Configuration (optional)
      - MAIL_TO=${MAIL_TO:-}
      # Model Configuration
      - GRAPH_AGENT_MODEL=${GRAPH_AGENT_MODEL:-gemini-2.5-flash}
      - PODCAST_SCRIPT_DEFAULT_MODEL=${PODCAST_SCRIPT_DEFAULT_MODEL:-gpt-4o-mini}
      - EXTRACT_KNOWLEDGE_MODEL=${EXTRACT_KNOWLEDGE_MODEL:-gemma3:27b-it-q8_0}
      # Ollama Configuration (Docker uses host.docker.internal to access host services)
      - OLLAMA_URL=http://host.docker.internal:11434
      - OLLAMA_DEF_SMALL_MODEL=${OLLAMA_DEF_SMALL_MODEL:-gemma3:27b-it-q8_0}
      # Other Services (optional)
      - SPREADSHEET_ID=${SPREADSHEET_ID:-}
      - MLX_LLM_SERVER_URL=http://host.docker.internal:8080
      # Logging
      - LOG_DIR=/app/logs
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      # Node.js module path for Playwright
      - NODE_PATH=/usr/lib/node_modules
    volumes:
      - ./docker-compose-data/expertagent/token:/app/token
      - ./docker-compose-data/expertagent/logs:/app/logs
    # Playwright browser support: Chromium needs sufficient shared memory
    shm_size: 2gb
    # Security options for Chromium browser (disable seccomp for sandbox)
    security_opt:
      - seccomp=unconfined
    # Add SYS_ADMIN capability for Chromium sandboxing
    cap_add:
      - SYS_ADMIN
    depends_on:
      myvault:
        condition: service_healthy
    networks:
      - myswiftagent
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  # GraphAiServer Service - Graph AI workflow service
  graphaiserver:
    env_file:
      - .env.docker
    image: myswiftagent-graphaiserver:${GRAPHAISERVER_VERSION:-0.1.0}
    build:
      context: ./graphAiServer
      dockerfile: Dockerfile
      tags:
        - "myswiftagent-graphaiserver:${GRAPHAISERVER_VERSION:-0.1.0}"
    container_name: myswiftagent-graphaiserver
    ports:
      - "8005:8000"
    environment:
      - NODE_ENV=production
      - PORT=8000
      - TZ=Asia/Tokyo
      - MODEL_BASE_PATH=/app/config/graphai/
      # Admin authentication
      - ADMIN_TOKEN=${GRAPHAISERVER_ADMIN_TOKEN}
      # API Keys are managed in MyVault (not passed as env vars)
      # Logging
      - LOG_DIR=/app/logs
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ./docker-compose-data/graphaiserver/config:/app/config
      - ./docker-compose-data/graphaiserver/logs:/app/logs
    networks:
      - myswiftagent
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  # CommonUI Service - Web interface (Streamlit)
  commonui:
    env_file:
      - .env.docker
    image: myswiftagent-commonui:${COMMONUI_VERSION:-0.2.0}
    build:
      context: ./commonUI
      dockerfile: Dockerfile
      tags:
        - "myswiftagent-commonui:${COMMONUI_VERSION:-0.2.0}"
    container_name: myswiftagent-commonui
    ports:
      - "8501:8501"
    environment:
      - PYTHONPATH=/app
      - TZ=Asia/Tokyo
      # Service API URLs (using correct environment variable names for config.py)
      - JOBQUEUE_BASE_URL=http://jobqueue:8000
      - MYSCHEDULER_BASE_URL=http://myscheduler:8000
      - MYVAULT_BASE_URL=http://myvault:8000
      - EXPERTAGENT_BASE_URL=http://expertagent:8000
      - GRAPHAISERVER_BASE_URL=http://graphaiserver:8000
      # Service authentication tokens
      - JOBQUEUE_API_TOKEN=${JOBQUEUE_API_TOKEN:-}
      - MYSCHEDULER_API_TOKEN=${MYSCHEDULER_API_TOKEN:-}
      - MYVAULT_SERVICE_NAME=commonui
      - MYVAULT_SERVICE_TOKEN=${MYVAULT_TOKEN_COMMONUI}
      - EXPERTAGENT_ADMIN_TOKEN=${EXPERTAGENT_ADMIN_TOKEN:-}
      - GRAPHAISERVER_ADMIN_TOKEN=${GRAPHAISERVER_ADMIN_TOKEN:-}
      # Logging
      - LOG_DIR=/app/logs
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ./docker-compose-data/commonUI:/app/data
      - ./docker-compose-data/commonUI/logs:/app/logs
    depends_on:
      jobqueue:
        condition: service_healthy
      myscheduler:
        condition: service_healthy
      myvault:
        condition: service_healthy
      expertagent:
        condition: service_healthy
      graphaiserver:
        condition: service_healthy
    networks:
      - myswiftagent
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    restart: unless-stopped

networks:
  myswiftagent:
    driver: bridge
    name: myswiftagent-network
