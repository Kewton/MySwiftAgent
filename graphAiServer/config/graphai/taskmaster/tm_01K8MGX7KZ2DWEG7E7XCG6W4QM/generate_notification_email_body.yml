version: 0.5
nodes:
  # REQUIRED: Input node - receives user_input from API request
  source: {}

  # Step 1: Build prompt for email generation using stringTemplateAgent
  # This converts the upload_plan array into a formatted string for the LLM
  build_email_prompt:
    agent: stringTemplateAgent
    inputs:
      upload_plan: :source.upload_plan
    params:
      template: |-
        あなたはメール本文生成エキスパートです。
        以下のアップロード計画情報を基に、ユーザーに対する通知メールの件名と本文を生成してください。

        アップロード計画情報:
        ${upload_plan}

        # 制約条件
        - メール件名は簡潔で、内容を明確に表現すること（最大100文字）
        - メール本文は分かりやすく、以下の情報を含むこと：
          * アップロード対象ファイル一覧（ファイル名、保存先パス）
          * 各ファイルのアップロード予定状況
          * 実行予定日時や次のステップ（あれば）
        - 本文は敬語を使用し、プロフェッショナルなトーンで作成すること
        - HTMLではなくプレーンテキスト形式で出力すること
        - 日本語で出力すること
        - 出力は RESPONSE_FORMAT に従うこと。返却は JSON 形式で行い、コメントやマークダウンは含めないこと

        # RESPONSE_FORMAT:
        {
          "success": true,
          "subject": "メール件名",
          "body": "メール本文（プレーンテキスト）",
          "error_message": ""
        }

  # Step 2: Call expertAgent jsonoutput API via fetchAgent to generate email content
  # Using Gemini 2.5 Flash for fast, reliable JSON output
  generate_email_content:
    agent: fetchAgent
    inputs:
      url: http://localhost:8104/aiagent-api/v1/aiagent/utility/jsonoutput
      method: POST
      body:
        user_input: :build_email_prompt
        model_name: gemini-2.5-flash
    timeout: 60000

  # Step 3: Format final output with direct references to LLM result
  # Ensures output matches the required output_interface schema
  output:
    agent: copyAgent
    inputs:
      result:
        success: :generate_email_content.result.success
        subject: :generate_email_content.result.subject
        body: :generate_email_content.result.body
        error_message: :generate_email_content.result.error_message
    isResult: true
