version: 0.5
nodes:
  # REQUIRED: Source node receives user_input from API request
  # Input format: {"user_input": {"keyword": "string", "recipient_email": "email@example.com"}}
  source: {}

  # Step 1: Build validation prompt using stringTemplateAgent
  # This constructs a prompt with the input parameters for LLM validation
  build_validation_prompt:
    agent: stringTemplateAgent
    inputs:
      keyword: :source.keyword
      recipient_email: :source.recipient_email
    params:
      template: |-
        あなたはポッドキャストパラメータ検証システムです。
        以下の入力パラメータを検証し、JSON形式で結果を返してください。

        入力パラメータ:
        - キーワード: ${keyword}
        - 送信先メールアドレス: ${recipient_email}

        # 検証ルール
        - キーワードは1文字以上であること
        - メールアドレスは有効なメール形式であること（@を含む）
        - 両方のパラメータが存在すること

        # 制約条件
        - 検証に失敗した場合、successはfalseとし、error_messageに理由を記載すること
        - 検証に成功した場合、successはtrueとし、入力値をそのまま返すこと
        - 日本語で出力すること
        - 出力は RESPONSE_FORMAT に従うこと。返却は JSON 形式で行い、コメントやマークダウンは含めないこと

        # RESPONSE_FORMAT:
        {
          "success": true,
          "keyword": "検証済みのキーワード",
          "recipient_email": "検証済みのメールアドレス",
          "error_message": ""
        }

  # Step 2: Call expertAgent jsonoutput API for validation
  # Uses Gemini 2.5 Flash for fast validation processing
  validate_parameters:
    agent: fetchAgent
    inputs:
      url: http://localhost:8104/aiagent-api/v1/aiagent/utility/jsonoutput
      method: POST
      body:
        user_input: :build_validation_prompt
        model_name: gemini-2.5-flash
    timeout: 60000

  # Step 3: Format final output with validation results
  # Maps LLM response to output interface schema
  output:
    agent: copyAgent
    inputs:
      result:
        success: :validate_parameters.result.success
        keyword: :validate_parameters.result.keyword
        recipient_email: :validate_parameters.result.recipient_email
        error_message: :validate_parameters.result.error_message
    isResult: true
