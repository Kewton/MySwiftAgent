version: 0.5
nodes:
  # REQUIRED: Input node - receives user_input from API request
  source: {}

  # Step 1: Build email body prompt using stringTemplateAgent
  # This constructs the email content from upload results
  build_email_prompt:
    agent: stringTemplateAgent
    inputs:
      upload_results: :source.upload_results
    params:
      template: |-
        以下のファイルアップロード結果を基に、メール本文を生成してください。

        アップロード結果: ${upload_results}

        # 制約条件
        - 成功したファイルのみを記載すること
        - 失敗したファイルについては別途エラー情報を記載すること
        - 日本語で出力すること
        - 出力は JSON 形式で行い、コメントやマークダウンは含めないこと

        # RESPONSE_FORMAT:
        {
          "subject": "メール件名",
          "body": "メール本文",
          "success_count": 成功数,
          "failure_count": 失敗数
        }

  # Step 2: Generate email content using expertAgent jsonoutput API
  generate_email_content:
    agent: fetchAgent
    inputs:
      url: http://localhost:8104/aiagent-api/v1/aiagent/utility/jsonoutput
      method: POST
      body:
        user_input: :build_email_prompt
        model_name: gemini-2.5-flash
    timeout: 60000

  # Step 3: Send email via Gmail API using expertAgent
  # This calls the Gmail send endpoint with the generated email content
  send_email:
    agent: fetchAgent
    inputs:
      url: http://localhost:8104/aiagent-api/v1/utility/gmail/send
      method: POST
      body:
        to: "notification@example.com"
        subject: :generate_email_content.result.subject
        body: :generate_email_content.result.body
    timeout: 30000

  # Step 4: Format final output
  # Maps the Gmail API response to the required output interface
  output:
    agent: copyAgent
    inputs:
      result:
        success: true
        message_id: :send_email.message_id
        error_message: ""
    isResult: true
