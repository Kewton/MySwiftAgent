version: 0.5
nodes:
  # Source node - receives user_input with theme, public_url, user_name
  source: {}

  # Step 1: Build prompt for simulating email sending
  build_email_send_prompt:
    agent: stringTemplateAgent
    inputs:
      theme: :source.theme
      public_url: :source.public_url
      user_name: :source.user_name
    params:
      template: |-
        あなたはメール送信システムです。
        以下の情報を基に、メール送信処理の結果を模擬的に生成してください。

        宛先ユーザー名: ${user_name}
        ポッドキャストテーマ: ${theme}
        公開リンク: ${public_url}

        メール件名: ポッドキャスト「${theme}」が公開されました
        メール本文:
        こんにちは、${user_name}様

        いつもお世話になっております。

        ポッドキャスト「${theme}」が完成いたしました。

        以下のリンクからアクセスしていただけます：
        ${public_url}

        ご視聴ありがとうございます。

        よろしくお願いいたします。

        # 制約条件
        - メール送信処理の模擬結果を生成すること
        - 実際のメール送信は行わないこと（モックデータを返す）
        - トランザクションIDは架空のIDを生成すること
        - 日本語で出力すること
        - 出力は RESPONSE_FORMAT に従うこと。返却は JSON 形式で行い、コメントやマークダウンは含めないこと

        # RESPONSE_FORMAT:
        {
          "success": true,
          "transaction_id": "email_tx_20251027_123456",
          "status_message": "メールが正常に送信されました",
          "error_message": ""
        }

  # Step 2: Simulate email sending
  simulate_email_send:
    agent: fetchAgent
    inputs:
      url: http://localhost:8104/aiagent-api/v1/aiagent/utility/jsonoutput
      method: POST
      body:
        user_input: :build_email_send_prompt
        model_name: gemini-2.5-flash
    timeout: 60000

  # Step 3: Format final output
  output:
    agent: copyAgent
    inputs:
      result:
        success: :simulate_email_send.result.success
        transaction_id: :simulate_email_send.result.transaction_id
        status_message: :simulate_email_send.result.status_message
        error_message: :simulate_email_send.result.error_message
    isResult: true
