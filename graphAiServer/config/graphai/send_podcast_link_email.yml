version: 0.5
nodes:
  # REQUIRED: Source node receives user_input from API request
  # Input structure: {public_url, user_email, theme_definition}
  source: {}

  # Step 1: Build email subject and body using stringTemplateAgent
  # This constructs the email content based on podcast information
  build_email_content:
    agent: stringTemplateAgent
    inputs:
      public_url: :source.public_url
      user_email: :source.user_email
      theme_definition: :source.theme_definition
    params:
      template: |-
        あなたはポッドキャストメール送信システムです。
        以下の情報を基に、ポッドキャストリンク送信メールの件名と本文を生成してください。

        ポッドキャスト公開URL: ${public_url}
        受信者メールアドレス: ${user_email}
        ポッドキャスト構成要素: ${theme_definition}

        # 制約条件
        - メール件名は簡潔で、ポッドキャストの内容を反映すること
        - メール本文は親切で、ポッドキャストリンクを明確に記載すること
        - 日本語で出力すること
        - 出力は RESPONSE_FORMAT に従うこと。返却は JSON 形式で行い、コメントやマークダウンは含めないこと

        # RESPONSE_FORMAT:
        {
          "subject": "メール件名",
          "body": "メール本文"
        }

  # Step 2: Generate email content using expertAgent jsonoutput API
  # Uses Gemini 2.5 Flash for fast, reliable email generation
  generate_email:
    agent: fetchAgent
    inputs:
      url: http://localhost:8104/aiagent-api/v1/aiagent/utility/jsonoutput
      method: POST
      body:
        user_input: :build_email_content
        model_name: gemini-2.5-flash
    timeout: 60000

  # Step 3: Mock email sending via expertAgent jsonoutput API
  # Since actual email sending requires external SMTP service,
  # we generate a mock response that simulates successful email delivery
  # In production, this would call the actual /api/v1/email endpoint
  build_send_prompt:
    agent: stringTemplateAgent
    inputs:
      recipient_email: :source.user_email
      subject: :generate_email.result.subject
      body: :generate_email.result.body
      public_url: :source.public_url
    params:
      template: |-
        あなたはメール送信結果を模擬するシステムです。
        以下の情報を基に、メール送信の成功結果を生成してください。

        受信者: ${recipient_email}
        件名: ${subject}
        本文: ${body}
        ポッドキャストURL: ${public_url}

        # 制約条件
        - メール送信は成功したと仮定すること
        - message_idはUUID形式の一意な識別子を生成すること
        - error_messageは空文字列とすること
        - 出力は RESPONSE_FORMAT に従うこと。返却は JSON 形式で行い、コメントやマークダウンは含めないこと

        # RESPONSE_FORMAT:
        {
          "success": true,
          "message_id": "UUID形式のメッセージID",
          "error_message": ""
        }

  # Step 4: Execute mock email sending
  send_email:
    agent: fetchAgent
    inputs:
      url: http://localhost:8104/aiagent-api/v1/aiagent/utility/jsonoutput
      method: POST
      body:
        user_input: :build_send_prompt
        model_name: gemini-2.5-flash
    timeout: 60000

  # Step 5: Format final output matching output_interface schema
  # Returns success flag, message_id, and error_message
  output:
    agent: copyAgent
    inputs:
      result:
        success: :send_email.result.success
        message_id: :send_email.result.message_id
        error_message: :send_email.result.error_message
    isResult: true
