version: 0.5
nodes:
  # REQUIRED: Source node receives user_input from API request
  # Input: {"user_input": {"user_keyword": "...", "user_email": "..."}}
  source: {}

  # Step 1: Build LLM prompt using stringTemplateAgent
  # This is MANDATORY when using :source.field references in multi-line strings
  # Extracts user_keyword and user_email from source node
  build_prompt:
    agent: stringTemplateAgent
    inputs:
      keyword: :source.user_keyword
      email: :source.user_email
    params:
      template: |-
        あなたはポッドキャスト台本作成の専門家です。
        以下のキーワードに基づき、自然な会話形式のポッドキャスト台本を生成してください。

        キーワード: ${keyword}
        ユーザーメールアドレス: ${email}

        # 制約条件
        - 自然な会話形式で、2人のホスト（ホストA、ホストB）による対話形式にすること
        - 導入部、メイン内容、まとめの3部構成にすること
        - 各セクションは明確に区切ること
        - 日本語で出力すること
        - 出力は RESPONSE_FORMAT に従うこと。返却は JSON 形式で行い、コメントやマークダウンは含めないこと

        # RESPONSE_FORMAT:
        {
          "script_text": "生成されたポッドキャスト台本テキスト（会話形式）",
          "duration_estimate_minutes": 推定再生時間（分）
        }

  # Step 2: Generate podcast script using expertAgent jsonoutput API
  # Calls fetchAgent to invoke expertAgent jsonoutput API with Gemini 2.5 Flash
  # This is the RECOMMENDED API for this task
  generate_script:
    agent: fetchAgent
    inputs:
      url: http://localhost:8104/aiagent-api/v1/aiagent/utility/jsonoutput
      method: POST
      body:
        user_input: :build_prompt
        model_name: gemini-2.5-flash
    timeout: 60000

  # Step 3: Format final output
  # Maps generated script to output interface schema
  # Includes success flag, script_text, user_email, and error handling
  output:
    agent: copyAgent
    inputs:
      result:
        success: true
        script_text: :generate_script.result.script_text
        user_email: :source.user_email
        error_message: ""
    isResult: true
