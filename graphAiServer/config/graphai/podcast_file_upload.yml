version: 0.5
nodes:
  # Source node - receives user_input with script_text, voice_id, bgm_style
  source: {}

  # Step 1: Build prompt for simulating file upload process
  build_upload_prompt:
    agent: stringTemplateAgent
    inputs:
      script_text: :source.script_text
      voice_id: :source.voice_id
      bgm_style: :source.bgm_style
    params:
      template: |-
        あなたはポッドキャストファイルのアップロード処理を模擬するシステムです。
        以下の情報を基に、ファイルアップロード結果を生成してください。

        台本テキスト: ${script_text}
        音声ID: ${voice_id}
        BGMスタイル: ${bgm_style}

        # 制約条件
        - アップロード処理の模擬結果を生成すること
        - 実際のファイルアップロードは行わないこと（モックデータを返す）
        - ファイル名は現在日時を含む形式にすること
        - ストレージパスは架空のGCS/S3パスにすること
        - 日本語で出力すること
        - 出力は RESPONSE_FORMAT に従うこと。返却は JSON 形式で行い、コメントやマークダウンは含めないこと

        # RESPONSE_FORMAT:
        {
          "success": true,
          "storage_path": "gs://podcast-bucket/2025/10/podcast_20251027_123456.mp3",
          "file_name": "podcast_20251027_123456.mp3",
          "file_size_bytes": 1048576,
          "duration_seconds": 180
        }

  # Step 2: Simulate upload process with mock data
  simulate_upload:
    agent: fetchAgent
    inputs:
      url: http://localhost:8104/aiagent-api/v1/aiagent/utility/jsonoutput
      method: POST
      body:
        user_input: :build_upload_prompt
        model_name: gemini-2.5-flash
    timeout: 60000

  # Step 3: Format final output
  output:
    agent: copyAgent
    inputs:
      result:
        success: :simulate_upload.result.success
        storage_path: :simulate_upload.result.storage_path
        file_name: :simulate_upload.result.file_name
        file_size_bytes: :simulate_upload.result.file_size_bytes
        duration_seconds: :simulate_upload.result.duration_seconds
        error_message: ""
    isResult: true
