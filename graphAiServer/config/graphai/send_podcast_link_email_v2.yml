version: 0.5
nodes:
  # Input node - receives user_input from API request
  source: {}

  # Step 1: Build email body prompt using stringTemplateAgent
  # This constructs the email content with podcast theme and URL
  build_email_prompt:
    agent: stringTemplateAgent
    inputs:
      theme: :source.theme
      public_url: :source.public_url
      user_name: :source.user_name
    params:
      template: |-
        あなたはメール本文生成システムです。
        以下の情報を基に、ポッドキャストリンク送信メールの本文を生成してください。

        ポッドキャストテーマ: ${theme}
        公開URL: ${public_url}
        ユーザー名: ${user_name}

        # 制約条件
        - 日本語で丁寧なメール本文を作成すること
        - ポッドキャストテーマとURLを含めること
        - ユーザー名を宛名に使用すること
        - メール本文は専門的で親切な内容にすること
        - 出力は JSON 形式で行い、コメントやマークダウンは含めないこと

        # RESPONSE_FORMAT:
        {
          "subject": "メールの件名",
          "body": "メール本文"
        }

  # Step 2: Generate email content using LLM via expertAgent jsonoutput API
  generate_email:
    agent: fetchAgent
    inputs:
      url: http://localhost:8104/aiagent-api/v1/aiagent/utility/jsonoutput
      method: POST
      body:
        user_input: :build_email_prompt
        model_name: gemini-2.5-flash
    timeout: 60000

  # Step 3: Build email sending prompt for mock email service
  # This creates a mock email sending result with transaction ID
  build_send_prompt:
    agent: stringTemplateAgent
    inputs:
      subject: :generate_email.result.subject
      body: :generate_email.result.body
    params:
      template: |-
        あなたはメール送信サービスの結果を模擬するシステムです。
        以下のメール情報を基に、メール送信結果を生成してください。

        件名: ${subject}
        本文: ${body}

        # 制約条件
        - メール送信は成功したと仮定すること
        - トランザクションIDは UUID形式の文字列にすること
        - ステータスメッセージは日本語で作成すること
        - 出力は JSON 形式で行い、コメントやマークダウンは含めないこと

        # RESPONSE_FORMAT:
        {
          "success": true,
          "transaction_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "status_message": "メール送信に成功しました"
        }

  # Step 4: Generate email sending result using LLM
  generate_send_result:
    agent: fetchAgent
    inputs:
      url: http://localhost:8104/aiagent-api/v1/aiagent/utility/jsonoutput
      method: POST
      body:
        user_input: :build_send_prompt
        model_name: gemini-2.5-flash
    timeout: 60000

  # Step 5: Format final output with required schema
  output:
    agent: copyAgent
    inputs:
      result:
        success: :generate_send_result.result.success
        transaction_id: :generate_send_result.result.transaction_id
        status_message: :generate_send_result.result.status_message
        error_message: ""
    isResult: true
