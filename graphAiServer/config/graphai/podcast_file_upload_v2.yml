version: 0.5
nodes:
  # REQUIRED: Source node receives user_input from API request
  # Input schema: {script_text, voice_id, bgm_style}
  source: {}

  # Step 1: Build LLM prompt to generate mock TTS audio and upload result
  # This node constructs a detailed prompt for the LLM to simulate:
  # - TTS audio generation from script
  # - BGM addition
  # - Cloud storage upload
  build_upload_prompt:
    agent: stringTemplateAgent
    inputs:
      script_text: :source.script_text
      voice_id: :source.voice_id
      bgm_style: :source.bgm_style
    params:
      template: |-
        あなたはポッドキャストファイルアップロード処理を模擬するシステムです。
        以下の情報を基に、TTS音声生成とクラウドストレージへのアップロード結果を生成してください。

        # 入力情報
        台本テキスト: ${script_text}
        音声ID: ${voice_id}
        BGMスタイル: ${bgm_style}

        # 処理内容
        1. 台本テキストをTTSエンジンで音声ファイルに変換（モック）
        2. 指定されたBGMスタイルを追加（モック）
        3. 生成されたファイルをGoogle DriveまたはS3にアップロード（モック）
        4. 永続的なストレージパスを生成

        # 制約条件
        - 実際のTTS音声生成は行わないこと（モックデータを返す）
        - 実際のファイルアップロードは行わないこと（モックデータを返す）
        - ストレージパスはGoogle DriveまたはS3の形式にすること
        - ファイル名は現在日時を含む形式にすること（例: podcast_20240115_143022.mp3）
        - 日本語で出力すること
        - 出力は RESPONSE_FORMAT に従うこと。返却は JSON 形式で行い、コメントやマークダウンは含めないこと

        # RESPONSE_FORMAT:
        {
          "success": true,
          "storage_path": "gs://podcast-storage/uploads/podcast_20240115_143022.mp3",
          "file_size_bytes": 2097152,
          "duration_seconds": 300,
          "error_message": ""
        }

  # Step 2: Call LLM via expertAgent jsonoutput API to generate mock upload result
  # Uses Gemini 2.5 Flash for fast processing
  # Timeout: 60 seconds (MANDATORY for all LLM calls)
  generate_upload_result:
    agent: fetchAgent
    inputs:
      url: http://localhost:8104/aiagent-api/v1/aiagent/utility/jsonoutput
      method: POST
      body:
        user_input: :build_upload_prompt
        model_name: gemini-2.5-flash
    timeout: 60000

  # Step 3: Format final output matching output_interface schema
  # Extracts success, storage_path, and error_message from LLM result
  # Direct reference pattern: no unnecessary extraction nodes
  output:
    agent: copyAgent
    inputs:
      result:
        success: :generate_upload_result.result.success
        storage_path: :generate_upload_result.result.storage_path
        error_message: :generate_upload_result.result.error_message
    isResult: true
