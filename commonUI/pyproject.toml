[project]
name = "commonUI"
version = "0.3.0"
description = "共通UI コンポーネントとテンプレート管理サービス"
requires-python = ">=3.11"
authors = [
    {name = "Your Name", email = "your.email@example.com"},
]
dependencies = [
    "streamlit>=1.28.0",
    "pydantic>=2.0.0",
    "httpx>=0.24.0",
    "python-dotenv>=1.0.0",
    "croniter>=1.3.0",
    "pandas>=2.0.0",
    "pyyaml>=6.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "httpx>=0.24.0",
]

[tool.ruff]
target-version = "py312"
line-length = 88

[tool.ruff.lint]
select = ["E", "W", "F", "I", "N", "UP", "ANN", "S", "B", "A", "COM", "C4", "DTZ", "T10", "EM", "EXE", "ISC", "ICN", "G", "INP", "PIE", "T20", "PYI", "PT", "Q", "RSE", "RET", "SLF", "SIM", "TID", "TCH", "INT", "ARG", "PTH", "ERA", "PD", "PGH", "PL", "TRY", "NPY", "RUF"]
ignore = [
    "ANN101",   # Missing type annotation for self
    "ANN102",   # Missing type annotation for cls
    "ANN001",   # Missing type annotation for function argument (relaxed for tests)
    "ANN201",   # Missing return type annotation (relaxed for tests)
    "ANN202",   # Missing return type annotation for private function
    "ANN401",   # Dynamically typed expressions (Any) - needed for context managers
    "RUF001",   # Ambiguous Unicode character - intentional use of emojis
    "SIM102",   # Nested if statements - sometimes clearer for complex logic
    "SIM117",   # Nested with statements - sometimes needed for Streamlit
    "PYI036",   # Type annotations in __exit__ - handled by Python stdlib conventions
    "S101",     # Use of assert - standard for pytest
    "S105",     # Hardcoded password - false positives
    "S106",     # Hardcoded password - false positives in test fixtures
    "S110",     # Try-except-pass - acceptable for optional imports
    "PLR2004",  # Magic numbers - acceptable in configuration
    "PLR0911",  # Too many return statements - acceptable for complex UI logic
    "PLR0912",  # Too many branches - acceptable for complex UI logic
    "PLR0915",  # Too many statements - acceptable for UI rendering functions
    "PLC0415",  # Import outside top-level - needed for optional/dynamic imports
    "PTH123",   # open() vs Path.open() - both are acceptable
    "E501",     # Line too long - handled by formatter, relaxed for UI strings
    "G004",     # Logging f-string - acceptable for simple logging
    "INP001",   # Implicit namespace package - acceptable for Streamlit apps
    "ARG002",   # Unused function argument - needed for interfaces
    "TRY300",   # Consider else block - not always needed
    "SLF001",   # Private member access - needed for testing
    "DTZ003",   # Naive datetime - acceptable for simple use cases
    "DTZ005",   # Timezone naive datetime - acceptable for simple use cases
    "B904",     # Raise without from - acceptable in some error handling
]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
# Relaxed settings for Streamlit UI code
disallow_untyped_defs = false
disallow_incomplete_defs = false
# Check specific directories that exist
files = ["Home.py", "components", "core", "pages"]

[tool.hatch.build.targets.wheel]
packages = ["app", "core", "components"]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[dependency-groups]
dev = [
    "pandas-stubs>=2.3.2.250926",
    "types-croniter>=6.0.0.20250809",
    "types-pyyaml>=6.0.12.20250915",
]
