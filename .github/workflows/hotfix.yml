name: Hotfix Workflow

on:
  push:
    branches:
      - 'hotfix/**'
  pull_request:
    branches: [main, staging, develop]
    types: [opened, synchronize, reopened]
    head:
      - 'hotfix/**'

defaults:
  run:
    working-directory: myscheduler

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/myscheduler

jobs:
  validate-hotfix:
    name: Validate Hotfix
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract hotfix info
        id: hotfix-info
        run: |
          BRANCH_NAME=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}
          echo "branch=$BRANCH_NAME" >> $GITHUB_OUTPUT

          if [[ $BRANCH_NAME =~ ^hotfix/([a-zA-Z0-9-]+)$ ]]; then
            HOTFIX_NAME=${BASH_REMATCH[1]}
            echo "name=$HOTFIX_NAME" >> $GITHUB_OUTPUT
            echo "valid=true" >> $GITHUB_OUTPUT
          else
            echo "valid=false" >> $GITHUB_OUTPUT
          fi

      - name: Validate hotfix branch format
        if: steps.hotfix-info.outputs.valid != 'true'
        run: |
          echo "❌ Invalid hotfix branch format. Expected: hotfix/description"
          echo "Examples: hotfix/urgent-crash-fix, hotfix/security-patch"
          exit 1

      - name: Check if branch is from main
        run: |
          git fetch origin main
          MERGE_BASE=$(git merge-base HEAD origin/main)
          MAIN_HEAD=$(git rev-parse origin/main)

          if [[ "$MERGE_BASE" != "$MAIN_HEAD" ]]; then
            echo "⚠️ WARNING: Hotfix branch may not be based on latest main"
            echo "Merge base: $MERGE_BASE"
            echo "Main HEAD:  $MAIN_HEAD"
          else
            echo "✅ Hotfix branch is properly based on main"
          fi

  emergency-tests:
    name: Emergency Tests
    runs-on: ubuntu-latest
    needs: [validate-hotfix]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Install dependencies
        run: uv sync --extra dev

      - name: Run critical tests only
        run: |
          echo "🚨 Running critical tests for hotfix"
          uv run pytest tests/ -v -m "critical" --maxfail=5

      - name: Run affected area tests
        run: |
          echo "🎯 Running tests for affected components"
          # 変更されたファイルに関連するテストを実行
          CHANGED_FILES=$(git diff --name-only origin/main..HEAD)
          echo "Changed files: $CHANGED_FILES"
          # 実際のテスト実行ロジック

      - name: Security validation
        run: |
          echo "🔒 Running security validation"
          uv run ruff check . --select=S

  build-hotfix:
    name: Build Hotfix
    runs-on: ubuntu-latest
    needs: [emergency-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get hotfix version
        id: version
        run: |
          CURRENT_VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
          HOTFIX_NAME="${{ needs.validate-hotfix.outputs.name }}"
          HOTFIX_VERSION="v${CURRENT_VERSION}-hotfix-${HOTFIX_NAME}"
          echo "version=$HOTFIX_VERSION" >> $GITHUB_OUTPUT

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push hotfix image
        uses: docker/build-push-action@v5
        with:
          context: ./myscheduler
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:hotfix-latest

  deploy-hotfix-staging:
    name: Deploy Hotfix to Staging
    runs-on: ubuntu-latest
    needs: [build-hotfix]
    if: github.event_name == 'push'
    environment: staging

    steps:
      - name: Deploy to staging for validation
        run: |
          echo "🚀 Deploying hotfix to staging for validation"
          HOTFIX_VERSION="${{ needs.build-hotfix.outputs.version }}"
          echo "Hotfix version: $HOTFIX_VERSION"

          # ステージング環境への緊急デプロイ
          # kubectl set image deployment/myscheduler-staging myscheduler=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$HOTFIX_VERSION
          # kubectl rollout status deployment/myscheduler-staging --timeout=180s

      - name: Quick validation
        run: |
          echo "⚡ Running quick validation on staging"
          sleep 30
          # curl -f https://staging.myscheduler.example.com/health || exit 1

  emergency-approval:
    name: Emergency Approval
    runs-on: ubuntu-latest
    needs: [deploy-hotfix-staging]
    if: github.event_name == 'pull_request'
    environment: emergency-approval

    steps:
      - name: Emergency approval gate
        run: |
          echo "🚨 Emergency hotfix requires approval"
          echo "Hotfix: ${{ needs.validate-hotfix.outputs.name }}"
          echo "This will be deployed to production immediately after approval"

  deploy-hotfix-production:
    name: Deploy Hotfix to Production
    runs-on: ubuntu-latest
    needs: [deploy-hotfix-staging]
    if: github.event_name == 'push'
    environment: production

    steps:
      - name: Pre-deployment backup
        run: |
          echo "💾 Creating emergency backup"
          # 緊急バックアップの作成
          # kubectl exec deployment/myscheduler-prod -- pg_dump -U user myscheduler > emergency-backup-$(date +%Y%m%d-%H%M%S).sql

      - name: Deploy hotfix to production
        run: |
          echo "🚨 Deploying hotfix to production"
          HOTFIX_VERSION="${{ needs.build-hotfix.outputs.version }}"

          # 本番環境への緊急デプロイ（ダウンタイム最小化）
          # kubectl set image deployment/myscheduler-prod myscheduler=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$HOTFIX_VERSION
          # kubectl rollout status deployment/myscheduler-prod --timeout=300s

      - name: Production validation
        run: |
          echo "✅ Validating production deployment"
          sleep 30
          # curl -f https://api.myscheduler.example.com/health || exit 1

  merge-back:
    name: Merge Back to Branches
    runs-on: ubuntu-latest
    needs: [deploy-hotfix-production]
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Configure git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Merge to main
        run: |
          echo "🔄 Merging hotfix to main"
          git checkout main
          git pull origin main
          git merge --no-ff ${{ github.ref_name }} -m "Merge hotfix: ${{ needs.validate-hotfix.outputs.name }}"
          git push origin main

      - name: Merge to staging
        run: |
          echo "🔄 Merging hotfix to staging"
          git checkout staging
          git pull origin staging
          git merge --no-ff main -m "Merge hotfix to staging: ${{ needs.validate-hotfix.outputs.name }}"
          git push origin staging

      - name: Merge to develop
        run: |
          echo "🔄 Merging hotfix to develop"
          git checkout develop
          git pull origin develop
          git merge --no-ff main -m "Merge hotfix to develop: ${{ needs.validate-hotfix.outputs.name }}"
          git push origin develop

  create-hotfix-release:
    name: Create Hotfix Release
    runs-on: ubuntu-latest
    needs: [merge-back]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create hotfix release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.build-hotfix.outputs.version }}
          name: Hotfix Release ${{ needs.build-hotfix.outputs.version }}
          body: |
            ## 🚨 Emergency Hotfix Release

            **Hotfix**: ${{ needs.validate-hotfix.outputs.name }}
            **Deployed**: $(date -u)

            This is an emergency hotfix release that has been deployed directly to production.

            ### Changes
            <!-- Auto-generated from commit messages -->

            ### Verification
            - ✅ Critical tests passed
            - ✅ Staging validation completed
            - ✅ Production deployment successful

          draft: false
          prerelease: false

  rollback-on-failure:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy-hotfix-production]
    if: failure()
    environment: production

    steps:
      - name: Emergency rollback
        run: |
          echo "🚨 Hotfix deployment failed - Initiating emergency rollback"
          # 即座に前のバージョンにロールバック
          # kubectl rollout undo deployment/myscheduler-prod

      - name: Notify failure
        run: |
          echo "🚨 CRITICAL: Hotfix deployment failed and rolled back"
          # 緊急通知
          # curl -X POST -H 'Content-type: application/json' \
          #   --data '{"text":"🚨 CRITICAL: Hotfix deployment failed - Production rolled back"}' \
          #   ${{ secrets.SLACK_EMERGENCY_WEBHOOK_URL }}

  success-notification:
    name: Success Notification
    runs-on: ubuntu-latest
    needs: [create-hotfix-release]

    steps:
      - name: Notify hotfix success
        run: |
          echo "✅ Hotfix deployed successfully"
          # 成功通知
          # curl -X POST -H 'Content-type: application/json' \
          #   --data '{"text":"✅ Emergency hotfix ${{ needs.validate-hotfix.outputs.name }} deployed successfully to production"}' \
          #   ${{ secrets.SLACK_WEBHOOK_URL }}