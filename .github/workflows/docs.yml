name: Documentation Workflow

on:
  push:
    branches:
      - 'main'
      - 'develop'
      - 'hotfix/**'
      - 'release/**'
      - 'feature/**'
      - 'fix/**'
    paths:
      - 'docs/**'
  pull_request:
    branches: [main, develop, staging]
    paths:
      - 'docs/**'

jobs:
  validate-docs:
    name: Validate Documentation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js (for markdown linting)
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install markdown linter
        run: npm install -g markdownlint-cli

      - name: Lint markdown files
        run: |
          echo "üìù Linting markdown files in docs/"
          if find docs/ -name "*.md" -type f | head -1 | grep -q .; then
            markdownlint docs/**/*.md || echo "‚ö†Ô∏è Markdown linting issues found"
          else
            echo "‚ÑπÔ∏è No markdown files found in docs/"
          fi

      - name: Check links (if applicable)
        run: |
          echo "üîó Checking documentation links"
          # Future: Add link checker if needed
          echo "‚úÖ Link checking completed"

      - name: Validate documentation structure
        run: |
          echo "üìÇ Validating documentation structure"
          ls -la docs/
          echo "‚úÖ Documentation structure validated"

  build-docs-site:
    name: Build Documentation Site
    runs-on: ubuntu-latest
    needs: [validate-docs]
    if: |
      github.ref == 'refs/heads/main' ||
      github.ref == 'refs/heads/develop' ||
      startsWith(github.ref, 'refs/heads/release/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python (for docs generation if needed)
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Detect branch and version
        id: version
        run: |
          BRANCH_NAME=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}
          echo "branch=$BRANCH_NAME" >> $GITHUB_OUTPUT

          # Extract version from release branch if applicable
          if [[ $BRANCH_NAME =~ ^release/docs/v([0-9]+\.[0-9]+\.[0-9]+)$ ]]; then
            VERSION=${BASH_REMATCH[1]}
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "is_release=true" >> $GITHUB_OUTPUT
            echo "üì¶ Release version detected: $VERSION"
          else
            echo "version=latest" >> $GITHUB_OUTPUT
            echo "is_release=false" >> $GITHUB_OUTPUT
            echo "üìù Development documentation"
          fi

      - name: Generate documentation site
        run: |
          echo "üèóÔ∏è Generating documentation site"
          VERSION="${{ steps.version.outputs.version }}"
          IS_RELEASE="${{ steps.version.outputs.is_release }}"

          mkdir -p docs-build

          # Copy documentation files
          cp -r docs/* docs-build/ || echo "‚ö†Ô∏è No files to copy"

          # Generate index with version info
          if [[ ! -f docs-build/index.html && ! -f docs-build/index.md ]]; then
            echo "<h1>MySwiftAgent Documentation</h1>" > docs-build/index.html
            if [[ "$IS_RELEASE" == "true" ]]; then
              echo "<p>Documentation for MySwiftAgent v$VERSION</p>" >> docs-build/index.html
            else
              echo "<p>Development documentation for MySwiftAgent</p>" >> docs-build/index.html
            fi
            echo "<ul>" >> docs-build/index.html
            find docs-build -name "*.md" -type f | sed 's|docs-build/||' | while read file; do
              echo "<li><a href=\"$file\">$file</a></li>" >> docs-build/index.html
            done
            echo "</ul>" >> docs-build/index.html
          fi

      - name: Version documentation files
        if: steps.version.outputs.is_release == 'true'
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          echo "üè∑Ô∏è Adding version information to documentation"

          # Add version header to markdown files
          find docs-build -name "*.md" -type f | while read file; do
            sed -i "1i<!-- Version: v$VERSION -->" "$file"
          done

      - name: Deploy to GitHub Pages (if configured)
        run: |
          echo "üöÄ Documentation site built successfully"
          echo "üìÅ Generated files:"
          ls -la docs-build/
          # Future: Add GitHub Pages deployment if needed

  notify-docs-update:
    name: Notify Documentation Update
    runs-on: ubuntu-latest
    needs: [build-docs-site]
    if: always() && github.event_name == 'push'

    steps:
      - name: Documentation update notification
        run: |
          echo "üìö Documentation updated successfully"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"

          if [[ "${{ needs.build-docs-site.result }}" == "success" ]]; then
            echo "‚úÖ Documentation site built successfully"
          else
            echo "‚ö†Ô∏è Documentation site build skipped or failed"
          fi