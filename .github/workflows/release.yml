name: Release Quality Assurance

on:
  push:
    branches:
      - 'release/**'
  pull_request:
    branches: [staging, main]
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type for version bump'
        required: true
        type: choice
        options: ['major', 'minor', 'patch', 'custom']
        default: 'minor'
      custom_version:
        description: 'Custom version (only if release_type is custom)'
        required: false
        type: string
      project:
        description: 'Project to release'
        required: true
        type: choice
        options: ['myscheduler', 'jobqueue']
        default: 'myscheduler'

env:
  REGISTRY: ghcr.io

jobs:
  create-release-branch:
    name: Create Release Branch
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
      release_branch: ${{ steps.branch.outputs.branch_name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Calculate next version
        id: version
        run: |
          PROJECT="${{ github.event.inputs.project }}"
          RELEASE_TYPE="${{ github.event.inputs.release_type }}"
          CUSTOM_VERSION="${{ github.event.inputs.custom_version }}"

          if [[ "$RELEASE_TYPE" == "custom" && -n "$CUSTOM_VERSION" ]]; then
            NEW_VERSION="$CUSTOM_VERSION"
          else
            # ÁèæÂú®„ÅÆ„Éê„Éº„Ç∏„Éß„É≥„ÇíÂèñÂæó
            CURRENT_VERSION=$(grep '^version = ' $PROJECT/pyproject.toml | sed 's/version = "\(.*\)"/\1/')
            echo "Current version: $CURRENT_VERSION"

            # „Çª„Éû„É≥„ÉÜ„Ç£„ÉÉ„ÇØ„Éê„Éº„Ç∏„Éß„Éã„É≥„Ç∞„Åß„Éê„Éº„Ç∏„Éß„É≥„ÇíÁÆóÂá∫
            IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"

            case "$RELEASE_TYPE" in
              "major")
                major=$((major + 1))
                minor=0
                patch=0
                ;;
              "minor")
                minor=$((minor + 1))
                patch=0
                ;;
              "patch")
                patch=$((patch + 1))
                ;;
            esac

            NEW_VERSION="$major.$minor.$patch"
          fi

          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "üöÄ Next version will be: $NEW_VERSION"

      - name: Update pyproject.toml
        run: |
          PROJECT="${{ github.event.inputs.project }}"
          NEW_VERSION="${{ steps.version.outputs.new_version }}"

          # pyproject.toml„ÅÆ„Éê„Éº„Ç∏„Éß„É≥„ÇíÊõ¥Êñ∞
          sed -i "s/^version = \".*\"/version = \"$NEW_VERSION\"/" $PROJECT/pyproject.toml

          echo "‚úÖ Updated $PROJECT/pyproject.toml to version $NEW_VERSION"
          cat $PROJECT/pyproject.toml | grep "^version = "

      - name: Create release branch
        id: branch
        run: |
          PROJECT="${{ github.event.inputs.project }}"
          NEW_VERSION="${{ steps.version.outputs.new_version }}"
          BRANCH_NAME="release/${PROJECT}/v${NEW_VERSION}"

          # develop„Åã„ÇâÊñ∞„Åó„ÅÑ„É™„É™„Éº„Çπ„Éñ„É©„É≥„ÉÅ„Çí‰ΩúÊàê
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          git checkout -b "$BRANCH_NAME"
          git add $PROJECT/pyproject.toml
          git commit -m "üîñ Bump version to $NEW_VERSION for $PROJECT release

          Release type: ${{ github.event.inputs.release_type }}

          ü§ñ Generated with [Claude Code](https://claude.ai/code)

          Co-Authored-By: Claude <noreply@anthropic.com>"

          git push origin "$BRANCH_NAME"

          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "üåø Created release branch: $BRANCH_NAME"

      - name: Create pull request
        run: |
          PROJECT="${{ github.event.inputs.project }}"
          NEW_VERSION="${{ steps.version.outputs.new_version }}"
          BRANCH_NAME="${{ steps.branch.outputs.branch_name }}"

          gh pr create \
            --title "üöÄ Release $PROJECT v$NEW_VERSION" \
            --body "$(cat <<'EOF'
          ## üì¶ Release Summary

          - **Project**: $PROJECT
          - **Version**: v$NEW_VERSION
          - **Release Type**: ${{ github.event.inputs.release_type }}

          ## üîÑ Automated Changes

          - ‚úÖ Version bump in pyproject.toml
          - üåø Release branch created: \`$BRANCH_NAME\`

          ## üìã Pre-merge Checklist

          - [ ] All CI checks pass
          - [ ] QA tests completed
          - [ ] Security scans clear
          - [ ] Release notes reviewed

          ## üéØ Next Steps

          1. Review and approve this PR
          2. Merge to staging for UAT
          3. Final merge to main for production release

          ü§ñ Generated with [Claude Code](https://claude.ai/code)
          EOF
          )" \
            --base develop \
            --head "$BRANCH_NAME"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch'
    outputs:
      project: ${{ steps.version.outputs.project }}
      version: ${{ steps.version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract project and version from branch
        id: version
        run: |
          BRANCH_NAME=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}
          echo "Branch name: $BRANCH_NAME"

          # Êñ∞„Åó„ÅÑÂΩ¢Âºè: release/{project}/vX.Y.Z „Åæ„Åü„ÅØ ÊóßÂΩ¢Âºè: release/vX.Y.Z
          if [[ $BRANCH_NAME =~ ^release/([^/]+)/v([0-9]+\.[0-9]+\.[0-9]+)$ ]]; then
            PROJECT=${BASH_REMATCH[1]}
            VERSION=${BASH_REMATCH[2]}
            echo "project=$PROJECT" >> $GITHUB_OUTPUT
            echo "version=v$VERSION" >> $GITHUB_OUTPUT
            echo "valid=true" >> $GITHUB_OUTPUT
            echo "‚úÖ New format detected: $PROJECT v$VERSION"
          elif [[ $BRANCH_NAME =~ ^release/v?([0-9]+\.[0-9]+\.[0-9]+)$ ]]; then
            # ÊóßÂΩ¢ÂºèÔºàmyschedulerÊÉ≥ÂÆöÔºâ
            PROJECT="myscheduler"
            VERSION=${BASH_REMATCH[1]}
            echo "project=$PROJECT" >> $GITHUB_OUTPUT
            echo "version=v$VERSION" >> $GITHUB_OUTPUT
            echo "valid=true" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Legacy format detected: assuming myscheduler v$VERSION"
          else
            echo "valid=false" >> $GITHUB_OUTPUT
          fi

      - name: Validate version format
        if: steps.version.outputs.valid != 'true'
        run: |
          echo "‚ùå Invalid release branch format."
          echo "Expected formats:"
          echo "  - release/{project}/vX.Y.Z (recommended)"
          echo "  - release/vX.Y.Z (legacy, assumes myscheduler)"
          exit 1

      - name: Check version in pyproject.toml
        run: |
          PROJECT="${{ steps.version.outputs.project }}"
          EXPECTED_VERSION="${{ steps.version.outputs.version }}"

          PYPROJECT_VERSION=$(grep '^version = ' $PROJECT/pyproject.toml | sed 's/version = "\(.*\)"/\1/')
          if [[ "v$PYPROJECT_VERSION" != "$EXPECTED_VERSION" ]]; then
            echo "‚ùå Version mismatch in $PROJECT:"
            echo "  Branch: $EXPECTED_VERSION"
            echo "  pyproject.toml: v$PYPROJECT_VERSION"
            echo ""
            echo "üí° To fix this, run:"
            echo "  sed -i 's/^version = \".*\"/version = \"${EXPECTED_VERSION#v}\"/' $PROJECT/pyproject.toml"
            exit 1
          fi

          echo "‚úÖ Version consistency verified for $PROJECT: $EXPECTED_VERSION"

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: [validate-release]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Install dependencies
        working-directory: ./${{ needs.validate-release.outputs.project }}
        run: uv sync --extra dev

      - name: Run linting
        working-directory: ./${{ needs.validate-release.outputs.project }}
        run: uv run ruff check .

      - name: Run type checking
        working-directory: ./${{ needs.validate-release.outputs.project }}
        run: uv run mypy app/

      - name: Run unit tests
        working-directory: ./${{ needs.validate-release.outputs.project }}
        run: uv run pytest tests/unit/ -v

      - name: Run integration tests
        working-directory: ./${{ needs.validate-release.outputs.project }}
        run: uv run pytest tests/integration/ -v

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [validate-release]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './${{ needs.validate-release.outputs.project }}'
          format: 'table'
          exit-code: '1'
          severity: 'CRITICAL,HIGH'

  build-release:
    name: Build Release Candidate
    runs-on: ubuntu-latest
    needs: [test, security-scan, validate-release]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version
        id: version
        run: |
          BRANCH_NAME=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}
          VERSION=${BRANCH_NAME#release/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Determine project and version
        id: project-info
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            PROJECT="${{ github.event.inputs.project }}"
            VERSION="${{ needs.create-release-branch.outputs.new_version }}"
          else
            PROJECT="${{ needs.validate-release.outputs.project }}"
            VERSION="${{ needs.validate-release.outputs.version }}"
          fi

          echo "project=$PROJECT" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "üéØ Building $PROJECT version $VERSION"

      - name: Build package for release
        run: |
          PROJECT="${{ steps.project-info.outputs.project }}"
          uv build
        working-directory: ./${{ steps.project-info.outputs.project }}

      - name: Build Docker image (verification only)
        run: |
          PROJECT="${{ steps.project-info.outputs.project }}"
          VERSION="${{ steps.project-info.outputs.version }}"
          docker build -t $PROJECT:v$VERSION-test .
        working-directory: ./${{ steps.project-info.outputs.project }}

      - name: Test release candidate
        run: |
          PROJECT="${{ steps.project-info.outputs.project }}"
          VERSION="${{ steps.project-info.outputs.version }}"

          docker run --rm -d --name $PROJECT-rc-test -p 8000:8000 $PROJECT:v$VERSION-test
          sleep 10

          # „Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØ
          echo "üîç Testing health endpoint..."
          curl -f http://localhost:8000/health || exit 1

          # APIÂü∫Êú¨Ê©üËÉΩ„ÉÜ„Çπ„Éà
          echo "üîç Testing API endpoints..."
          curl -f http://localhost:8000/api/v1/ || curl -f http://localhost:8000/ || exit 1

          docker stop $PROJECT-rc-test

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release-artifacts-${{ steps.project-info.outputs.project }}-${{ steps.project-info.outputs.version }}
          path: ./${{ steps.project-info.outputs.project }}/dist/

  qa-tests:
    name: QA Tests
    runs-on: ubuntu-latest
    needs: [build-release, validate-release]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run QA smoke tests
        run: |
          echo "üß™ Running QA smoke tests"
          # „Åì„Åì„Å´QA„ÉÜ„Çπ„Éà„ÅÆ„Ç≥„Éû„É≥„Éâ„ÇíËøΩÂä†
          # ‰æã: newman run postman-collection.json

      - name: Performance tests
        run: |
          echo "‚ö° Running performance tests"
          # „Åì„Åì„Å´„Éë„Éï„Ç©„Éº„Éû„É≥„Çπ„ÉÜ„Çπ„Éà„ÅÆ„Ç≥„Éû„É≥„Éâ„ÇíËøΩÂä†
          # ‰æã: k6 run performance-tests.js

  approval-gate:
    name: Approval Gate
    runs-on: ubuntu-latest
    needs: [qa-tests, validate-release]
    if: github.event_name == 'pull_request'
    environment: release-approval

    steps:
      - name: Wait for approval
        run: |
          echo "üö™ Waiting for release approval..."
          echo "This job requires manual approval to proceed with release."

  create-release-notes:
    name: Create Release Notes
    runs-on: ubuntu-latest
    needs: [qa-tests, validate-release]
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine project and generate release notes
        id: release-notes
        run: |
          # Extract project and version from branch name
          BRANCH_NAME=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}
          if [[ $BRANCH_NAME =~ ^release/([^/]+)/v([0-9]+\.[0-9]+\.[0-9]+)$ ]]; then
            PROJECT=${BASH_REMATCH[1]}
            CURRENT_VERSION=${BASH_REMATCH[2]}
          elif [[ $BRANCH_NAME =~ ^release/v?([0-9]+\.[0-9]+\.[0-9]+)$ ]]; then
            PROJECT="myscheduler"
            CURRENT_VERSION=${BASH_REMATCH[1]}
          fi

          echo "üìù Generating release notes for $PROJECT v$CURRENT_VERSION"

          # ÂâçÂõû„ÅÆ„Çø„Ç∞„ÇíÊ§úÁ¥¢Ôºà„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÂõ∫ÊúâÔºâ
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 --match="$PROJECT/v*" --exclude="$PROJECT/v$CURRENT_VERSION" 2>/dev/null || echo "")

          if [[ -n "$PREVIOUS_TAG" ]]; then
            echo "## üîÑ Changes since $PREVIOUS_TAG" > release-notes.md
            echo "" >> release-notes.md

            # „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÈñ¢ÈÄ£„ÅÆ„Ç≥„Éü„ÉÉ„Éà„ÅÆ„ÅøÊäΩÂá∫
            git log --pretty=format:"- %s (%an)" $PREVIOUS_TAG..HEAD --grep="$PROJECT" -- "$PROJECT/" >> release-notes.md

            # Á©∫„ÅÆÂ†¥Âêà„ÅØÂÖ®„Ç≥„Éü„ÉÉ„Éà„ÇíÂê´„ÇÅ„Çã
            if [[ ! -s release-notes.md || $(wc -l < release-notes.md) -le 2 ]]; then
              echo "## üîÑ Changes since $PREVIOUS_TAG" > release-notes.md
              echo "" >> release-notes.md
              git log --pretty=format:"- %s (%an)" $PREVIOUS_TAG..HEAD >> release-notes.md
            fi
          else
            echo "## üéâ Initial Release of $PROJECT" > release-notes.md
            echo "" >> release-notes.md
            echo "This is the first release of $PROJECT v$CURRENT_VERSION." >> release-notes.md
          fi

          echo "" >> release-notes.md
          echo "---" >> release-notes.md
          echo "ü§ñ Generated with [Claude Code](https://claude.ai/code)" >> release-notes.md

          echo "project=$PROJECT" >> $GITHUB_OUTPUT
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Upload release notes
        uses: actions/upload-artifact@v3
        with:
          name: release-notes-${{ steps.release-notes.outputs.project }}-v${{ steps.release-notes.outputs.version }}
          path: release-notes.md