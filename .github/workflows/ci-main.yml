name: CI - Main Branch Quality Check

on:
  push:
    branches: [main]
    paths:
      - 'myscheduler/**'
      - '.github/workflows/**'
      # docs changes are handled by separate docs workflow
      - '!docs/**'
  workflow_dispatch:

defaults:
  run:
    working-directory: ./myscheduler

jobs:
  quality-check:
    name: Main Branch Quality Verification
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Install dependencies
        run: uv sync --extra dev

      - name: Run linting
        run: uv run ruff check .

      - name: Run type checking
        run: uv run mypy app/

      - name: Run tests with coverage
        run: uv run pytest tests/ -v --cov=app --cov-report=xml --cov-report=term

      - name: Check test coverage
        run: |
          if [ -f coverage.xml ]; then
            echo "üìä Coverage report generated successfully"
          else
            echo "‚ö†Ô∏è Coverage report not found"
          fi

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./myscheduler/coverage.xml
          directory: ./myscheduler
          fail_ci_if_error: false

  security-scan:
    name: Security Verification
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './myscheduler'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        continue-on-error: true
        with:
          sarif_file: 'trivy-results.sarif'

  build-verification:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: [quality-check]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Build package
        run: uv build

      - name: Build Docker image
        run: docker build -t myscheduler:main-test .

      - name: Test Docker image
        run: |
          docker run --rm -d --name myscheduler-main-test -p 8000:8000 myscheduler:main-test
          sleep 10

          # „Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØ
          echo "üîç Testing health endpoint..."
          curl -f http://localhost:8000/health || exit 1

          # APIÂü∫Êú¨Ê©üËÉΩ„ÉÜ„Çπ„Éà
          echo "üîç Testing API endpoints..."
          curl -f http://localhost:8000/api/v1/jobs/ || exit 1

          docker stop myscheduler-main-test

  notify:
    name: Quality Check Results
    runs-on: ubuntu-latest
    needs: [quality-check, security-scan, build-verification]
    if: always()

    defaults:
      run:
        working-directory: .

    steps:
      - name: Success notification
        if: needs.quality-check.result == 'success' && needs.security-scan.result == 'success' && needs.build-verification.result == 'success'
        run: |
          echo "‚úÖ All main branch quality checks passed"

      - name: Failure notification
        if: needs.quality-check.result == 'failure' || needs.security-scan.result == 'failure' || needs.build-verification.result == 'failure'
        run: |
          echo "‚ùå Main branch quality checks failed - investigation required"
          echo "Quality Check: ${{ needs.quality-check.result }}"
          echo "Security Scan: ${{ needs.security-scan.result }}"
          echo "Build Verification: ${{ needs.build-verification.result }}"