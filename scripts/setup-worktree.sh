#!/bin/bash
# scripts/setup-worktree.sh
# Worktree自動セットアップスクリプト（空きポート検出方式）
#
# Usage:
#   cd ~/MySwiftAgent-worktrees/feature-issue-126
#   ~/MySwiftAgent/scripts/setup-worktree.sh

set -e

WORKTREE_DIR=$(pwd)
WORKTREE_NAME=$(basename "$WORKTREE_DIR")
MAIN_REPO=$(git rev-parse --show-toplevel 2>/dev/null || echo "$HOME/MySwiftAgent")

echo "📍 Setting up worktree: $WORKTREE_NAME"

# .env.local が既に存在する場合は再実行しない
if [ -f .env.local ]; then
    echo "⚠️  .env.local already exists. Skipping setup."
    echo "   If you want to regenerate, delete .env.local first:"
    echo "   rm .env.local && ~/MySwiftAgent/scripts/setup-worktree.sh"
    exit 0
fi

# 全worktreeから使用中のインデックスを収集
echo "🔍 Detecting used worktree indices..."
USED_INDICES=()

# MySwiftAgent-worktrees ディレクトリ内の全worktreeをスキャン
WORKTREES_DIR="$(dirname "$WORKTREE_DIR")"
if [ -d "$WORKTREES_DIR" ]; then
    for worktree in "$WORKTREES_DIR"/*/; do
        if [ -f "${worktree}.env.local" ]; then
            # .env.local から WORKTREE_INDEX を抽出
            INDEX=$(grep "^WORKTREE_INDEX=" "${worktree}.env.local" 2>/dev/null | cut -d'=' -f2)
            if [ -n "$INDEX" ]; then
                USED_INDICES+=($INDEX)
            fi
        fi
    done
fi

# 使用中のインデックスをソート
if [ ${#USED_INDICES[@]} -gt 0 ]; then
    USED_INDICES=($(printf '%s\n' "${USED_INDICES[@]}" | sort -n | uniq))
fi

# 空いている最小のインデックスを検索（1から順に）
WORKTREE_INDEX=1
for used in "${USED_INDICES[@]}"; do
    if [ "$WORKTREE_INDEX" -eq "$used" ]; then
        WORKTREE_INDEX=$((WORKTREE_INDEX + 1))
    else
        break
    fi
done

echo "✅ Assigned index: $WORKTREE_INDEX"
if [ ${#USED_INDICES[@]} -gt 0 ]; then
    echo "   Used indices: ${USED_INDICES[@]}"
else
    echo "   Used indices: none (this is the first worktree)"
fi

# ポート番号を計算
BASE_EXPERTAGENT=8104
BASE_MYVAULT=8103
BASE_MYSCHEDULER=8102
BASE_JOBQUEUE=8101
BASE_GRAPHAI=8100
BASE_VITE=5173

PORT_EXPERTAGENT=$((BASE_EXPERTAGENT + (WORKTREE_INDEX * 10)))
PORT_MYVAULT=$((BASE_MYVAULT + (WORKTREE_INDEX * 10)))
PORT_MYSCHEDULER=$((BASE_MYSCHEDULER + (WORKTREE_INDEX * 10)))
PORT_JOBQUEUE=$((BASE_JOBQUEUE + (WORKTREE_INDEX * 10)))
PORT_GRAPHAI=$((BASE_GRAPHAI + (WORKTREE_INDEX * 10)))
PORT_VITE=$((BASE_VITE + WORKTREE_INDEX))

# .env.local ファイルを生成（インデックスも記録）
cat > .env.local <<EOF
# Auto-generated by setup-worktree.sh
# Worktree: $WORKTREE_NAME (index: $WORKTREE_INDEX)
# Generated at: $(date)
# ⚠️ DO NOT DELETE WORKTREE_INDEX - it ensures port stability

# Worktree metadata
WORKTREE_INDEX=$WORKTREE_INDEX

# expertAgent
EXPERTAGENT_PORT=$PORT_EXPERTAGENT
MYVAULT_PORT=$PORT_MYVAULT

# myVault
MYVAULT_SERVICE_PORT=$PORT_MYVAULT

# myscheduler
MYSCHEDULER_PORT=$PORT_MYSCHEDULER

# jobqueue
JOBQUEUE_PORT=$PORT_JOBQUEUE

# graphAiServer
GRAPHAI_PORT=$PORT_GRAPHAI

# myAgentDesk (SvelteKit)
VITE_PORT=$PORT_VITE
EOF

echo ""
echo "✅ Created .env.local with port assignments:"
echo "   - expertAgent: $PORT_EXPERTAGENT"
echo "   - myVault: $PORT_MYVAULT"
echo "   - myscheduler: $PORT_MYSCHEDULER"
echo "   - jobqueue: $PORT_JOBQUEUE"
echo "   - graphAiServer: $PORT_GRAPHAI"
echo "   - myAgentDesk: $PORT_VITE"

# .envへのシンボリックリンク作成
if [ -f "$MAIN_REPO/.env" ] && [ ! -e .env ]; then
    ln -s "$MAIN_REPO/.env" .env
    echo "✅ Created symlink: .env -> $MAIN_REPO/.env"
elif [ -e .env ]; then
    echo "✅ .env already exists (symlink or file)"
fi

# myVault DB のコピー（並行起動対応）
if [ -f "$MAIN_REPO/myVault/data/myvault.db" ]; then
    mkdir -p myVault/data
    cp "$MAIN_REPO/myVault/data/myvault.db" myVault/data/myvault.db
    echo "✅ Copied myVault DB from main worktree"
    echo "   Note: This is an independent copy for parallel execution."
    echo "   Use ~/MySwiftAgent/scripts/sync-myvault-db.sh to sync updates."
elif [ -d "$MAIN_REPO/myVault/data" ]; then
    echo "⚠️  myVault DB not found in main worktree"
    echo "   Expected: $MAIN_REPO/myVault/data/myvault.db"
    echo "   Please run myVault setup in main worktree first."
fi

echo ""
echo "🎉 Worktree setup complete!"
echo ""
echo "📝 Next steps:"
echo "   1. Install dependencies:"
echo "      cd expertAgent && uv sync"
echo "      cd myAgentDesk && npm install"
echo ""
echo "   2. Start development servers:"
echo "      cd expertAgent && uv run uvicorn app.main:app --reload"
echo "      cd myAgentDesk && npm run dev"
echo ""
echo "   3. Access services:"
echo "      - expertAgent: http://localhost:$PORT_EXPERTAGENT"
echo "      - myVault: http://localhost:$PORT_MYVAULT"
echo "      - myAgentDesk: http://localhost:$PORT_VITE"
